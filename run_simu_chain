#!/bin/bash

# defaults
version=""

n_repetitions="10"

#models="exp1_con_rho0.05 exp1_con_rho0.10 exp1_con_rho0.15"
models="exp1_con_rho0.10"

input_version="version_4-2"

binnings="sb1"
#binnings="sb1,sb2,sb3"

errors="none stat syst norm stat,syst,norm"

fit_types="HighBeta-single-0.020"
#fit_types="HighBeta-single-0.020 HighBeta-sequence-0.005-0.020"
#fit_types="HighBeta-single-0.020 HighBeta-sequence-0.005-0.020 HighBeta-sequence-0.010-0.020 HighBeta-sequence-0.015-0.020 HighBeta-sequence-0.015-0.025"

#----------------------------------------------------------------------------------------------------

# parse command line
function PrintUsage()
{
	echo "PrintUsage $0 <option> <option>"
	echo "OPTIONS:"
	echo "    -version <string>        version of the simulation"
	echo "    -repetitions <integer>   number of repetitions to use"
	echo "    -models <string>         space-separated list of models"
	echo "    -input-version <string>  version of the input"
	echo "    -binnings <string>       comma-separated list of binnings"
	echo "    -errors <string>         space-separated list of error models"
	echo "    -fast                    use settings for a fast check"
}

#----------------------------------------------------------------------------------------------------

while [ -n "$1" ]
do
	case $1 in
		"-h" | "-help" | "--help")
			PrintUsage
			exit 0
			;;
		"-version")
			shift
			version="$1"
			;;
		"-repetitions")
			shift
			n_repetitions="$1"
			;;
		"-models")
			shift
			models="$1"
			;;
		"-input-version")
			shift
			input_version="$1"
			;;
		"-binnings")
			shift
			binnings="$1"
			;;
		"-errors")
			shift
			errors="$1"
			;;
		"-fast")
			n_repetitions="5"
			models="exp1_con_rho0.10"
			binnings="sb1"
			;;
		*)
			echo "ERROR: parameter '$1' not understood."
			PrintUsage
			exit 1
			;;
	esac

	shift
done

# check input
if [ -z "$version" ]
then
	echo "ERROR: version not defined."
	PrintUsage
	exit 2
fi



#----------------------------------------------------------------------------------------------------
# save info

topDir="data/simu/$version"
mkdir -p "$topDir"

cd "$BASE_DIR"

(
	echo "* recent commits: "
	git log --oneline | head -n 5

	echo ""
	echo "* status: "
	git status -uno

	echo ""
	echo "* config: "
	echo "    input_version=$input_version"
) > "$topDir/info"



#----------------------------------------------------------------------------------------------------

function RunOne()
{
	echo "* $model, $error_model"

	# build makefile
	makefile="makefile"
	rm -f "$makefile"

	(
		targets="process_hists"
		if [ "$run_fits" == "1" ]; then targets="$targets process_fits"; fi
		echo "all: $targets"
	) >> "$makefile"

	seeds=""
	seed_fits=""

	for seed in `seq 1 $n_repetitions`
	do
		d_seed="seed_$seed"
		mkdir -p "$d_seed"

		tag_seed="seed_${seed}_hist"

		(
			echo ""
			echo "$tag_seed:"
			echo "	@echo \"    - seed $seed\""
			echo "	@cd \"$d_seed\"; $BASE_DIR/.simu_make_histograms -model-file \"../../../models.root\" -model-obj \"$model/g_dsdt_CH\" \\"
			echo "		-input-file \"$BASE_DIR/data/input/$input_version/import.root\" -binnings \"$binnings\" -seed $seed \\"
			echo "		-sim-stat-err $e_stat -sim-syst-err $e_syst -sim-norm-err $e_norm\\"
			echo "			&> \"histograms.log\""
		) >> "$makefile"

		seeds="$seeds $tag_seed"

		for tp in ${fit_types[*]}
		do
			tag_fit="seed_${seed}_fit_${tp}"

			(
				echo ""
				echo "$tag_fit: $tag_seed"
				echo "	@cd \"$d_seed\"; $BASE_DIR/run_standard_fit -type \"$tp\" -input \"histograms.root\" -output \"$tp\""
			) >> "$makefile"
		
			seed_fits="$seed_fits $tag_fit"
		done
	done

	(
		echo ""
		echo "process_hists: $seeds"
		echo "	@$BASE_DIR/.simu_process_histograms -seed-min 1 -seed-max $n_repetitions -binnings \"$binnings\" &> \"process_histograms.log\""
	) >> "$makefile"

	process_fits=""

	for tp in ${fit_types[*]}
	do
		pattern="$tp/fit.root"
		if [[ $tp == *"sequence"* ]]; then pattern="${tp}/final_c.root"; fi

		tag="process_fits_${tp}"

		(
			echo ""
			echo "$tag: $seed_fits"
			echo "	@$BASE_DIR/.simu_process_fits -ref-file \"../../models.root\" -ref-object \"$model/info\" -input-pattern \"seed_%u/fit_${pattern}\"\\"
			echo "		-seed-min 1 -seed-max $n_repetitions -output \"process_fits_${tp}.root\" &> \"process_fits_${tp}.log\""
		) >> "$makefile"

		process_fits="$process_fits $tag"
	done

	(
		echo ""
		echo "process_fits: $process_fits"
	) >> "$makefile"

	# run makefile
	make -j20 -f "$makefile"
}


#----------------------------------------------------------------------------------------------------

# execute
make -j8 || exit 3

cd "$topDir"

$BASE_DIR/.simu_sample_models &> "models.log" || exit 21

for model in $models
do
	mkdir -p "$model"
	cd "$model"

	for error_model in $errors
	do
		mkdir -p "errors_$error_model"
		cd "errors_$error_model"

		e_stat="0"
		e_syst="0"
		e_norm="0"

		if [[ "$error_model" == *"stat"* ]]; then e_stat="1"; fi
		if [[ "$error_model" == *"syst"* ]]; then e_syst="1"; fi
		if [[ "$error_model" == *"norm"* ]]; then e_norm="1"; fi

		run_fits="1"

		RunOne

		cd ..
	done

	cd ..
done

wait
