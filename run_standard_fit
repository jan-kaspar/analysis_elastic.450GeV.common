#!/bin/bash

# defaults
fit_type=""
input=""
output=""

# parse command line
function PrintUsage()
{
	echo "PrintUsage $0 <option> <option>"
	echo "OPTIONS:"
	echo "    -type <string>        fit type"
	echo "    -input <string>       input specification"
	echo "    -output <string>      output specification"
}

while [ -n "$1" ]
do
	case $1 in
		"-h" | "-help" | "--help")
			PrintUsage
			exit 0
			;;
		"-type")
			shift
			fit_type="$1"
			;;
		"-input")
			shift
			input="$1"
			;;
		"-output")
			shift
			output="$1"
			;;
		*)
			echo "ERROR: parameter '$1' not understood."
			PrintUsage
			exit 1
			;;
	esac

	shift
done

# validate input
if [ -z "$fit_type" -o -z "$input" -o -z "$output" ]
then
	echo "ERROR: insufficient input"
	PrintUsage
	exit 1
fi

# make subdirectory
subdir="fit_$output"
mkdir -p "$subdir"

# run the fit
if [ "$fit_type" == "HighBeta-single-0.015" ]
then
	$BASE_DIR/.make_fit -input-file "$input" -input-datasets "high_beta" \
		-output-root "$subdir/fit.root" -output-results "$subdir/fit.results" \
		-t-max-high-beta 0.015 \
			&> "$subdir/fit.log" || exit 10
	exit 0
fi

if [ "$fit_type" == "HighBeta-single-0.020" ]
then
	$BASE_DIR/.make_fit -input-file "$input" -input-datasets "high_beta" \
		-output-root "$subdir/fit.root" -output-results "$subdir/fit.results" \
		-t-max-high-beta 0.020 \
			&> "$subdir/fit.log" || exit 10
	exit 0
fi

if [ "$fit_type" == "HighBeta-3-single-0.020" ]
then
	$BASE_DIR/.make_fit -input-file "$input" -input-datasets "high_beta" \
		-output-root "$subdir/fit.root" -output-results "$subdir/fit.results" \
		-n-b 3 -t-max-high-beta 0.020 \
			&> "$subdir/fit.log" || exit 10
	exit 0
fi

if [[ "$fit_type" == "HighBeta-sequence"* ]]
then
	buf=${fit_type#HighBeta-sequence-}

	t1="0.0004"
	t2=${buf%-*}
	t3=${buf#*-}

	rho="0.10"

	for rep in `seq 1`
	do
		tag="$subdir/step_${rep}_a"
		$BASE_DIR/.make_fit -input-file "$input" -input-datasets "high_beta" -output-root "$tag.root" -output-results "$tag.results" \
			-init-eta 1. -use-eta-fixed 1\
			-init-rho "$rho" -use-rho-fixed 1\
			-t-min-high-beta "$t2" -t-max-high-beta "$t3" \
				&> "$tag.log" || exit 10

		Ap=`cat $tag.log|grep "Ap-->"`
		Ap=${Ap#*-->}

		b1=`cat $tag.log|grep "b1-->"`
		b1=${b1#*-->}

		rho=`cat $tag.log|grep "rho-->"`
		rho=${rho#*-->}

		tag="$subdir/step_${rep}_b"
		$BASE_DIR/.make_fit -input-file "$input" -input-datasets "high_beta" -output-root "$tag.root" -output-results "$tag.results" \
			-use-A-from-Ap 1 -init-Ap "$Ap"\
			-init-rho "$rho" -use-rho-fixed 1\
			-init-b1 "$b1" -use-b1-fixed 1\
			-t-max-high-beta "$t1" \
				&> "$tag.log" || exit 11

		eta=`cat $tag.log|grep "eta-->"`
		eta=${eta#*-->}

		A=`cat $tag.log|grep "A-->"`
		A=${A#*-->}

		tag="$subdir/step_${rep}_c"
		$BASE_DIR/.make_fit -input-file "$input" -input-datasets "high_beta" -output-root "$tag.root" -output-results "$tag.results" \
			-init-eta "$eta" -use-eta-fixed 1\
			-init-A "$A" -use-A-fixed 1\
			-init-b1 "$b1" -use-b1-fixed 1\
			-t-max-high-beta "$t2" \
				&> "$tag.log" || exit 12

		rho=`cat $tag.log|grep "rho-->"`
		rho=${rho#*-->}
	done

	exit 0
fi

if [ "$fit_type" == "BothBetas-single" ]
then
	$BASE_DIR/.make_fit -input-file "$input" -input-datasets "high_beta,low_beta" \
		-output-root "$subdir/fit.root" -output-results "$subdir/fit.results" &> "$subdir/fit.log" || exit 10
	exit 0
fi

# unknown fit type
echo "ERROR: unknown fit type '$fit_type'"
exit 2
